Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

The overall run time complexity should be O(log (m+n)).

 

Example 1:

Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.
Example 2:

Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
 

Constraints:

nums1.length == m
nums2.length == n
0 <= m <= 1000
0 <= n <= 1000
1 <= m + n <= 2000
-106 <= nums1[i], nums2[i] <= 106


double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        vector<int> ans;
        int i=0;
        int j=0,c=-1;
        int m=nums1.size(),n=nums2.size();
        int total=(m+n);
        while(i<m && j<n){
            if(c==total/2){
                break;
            }
            if(nums1[i]<nums2[j]){
            
                ans.push_back(nums1[i]);
                i++;
            }
            else{
                
                ans.push_back(nums2[j]);
                j++;
            }
            c++;
        }
        while(i<m){
            if(c==total/2){
                break;
            }
            ans.push_back(nums1[i]);
                i++;
                c++;
        }
        while(j<n){
            if(c==total/2){
                break;
            }
            ans.push_back(nums2[j]);
                j++;
                c++;
        }
        double med=0;
        int a=ans.size();
        if(total%2==0){
            return double(((double)ans[a-1]+(double)ans[a-2])/2);
        }
        else{
            return double(ans[a-1]);
        }
        return med;
    }
