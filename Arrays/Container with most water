You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).

Find two lines that together with the x-axis form a container, such that the container contains the most water.

Return the maximum amount of water a container can store.

Notice that you may not slant the container.

 

Example 1:


Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.
Example 2:

Input: height = [1,1]
Output: 1
 

Constraints:

n == height.length
2 <= n <= 105
0 <= height[i] <= 104



int maxArea(vector<int>& height) {
        int area=0;
        int length=height.size()-1;

        for(int i=0,j=height.size()-1;i<height.size(),j>=0;){
            if(length==0){
                break;
            }
            if(min(height[i],height[j])*length > area){
                area=min(height[i],height[j])*length;
            
            }
            if(height[i]<height[j]){
                    i++;
                }
                else{
                    j--;
                }
            length--;
        }
    return area;
    }
